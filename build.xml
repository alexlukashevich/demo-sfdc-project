<project default="usage" basedir="." xmlns:sf="antlib:com.salesforce" xmlns:ml="org.missinglink.ant.task.http.HttpClientTask">
    <property environment="env"/>
    <property file="build.properties"/>

    <property name="sf.password" value="${env.SF_PASS}"/>
    <property name="sf.username" value="${env.SF_LOGIN}"/>
    <property name="sf.serverurl" value="${env.SF_URL}"/>
    <property name="sf.maxPoll" value="${env.MAX_POLL}"/>
    <property name="sf.passwordencrypted" value="${env.SF_ENCRYPTED}"/>
    <property name="html.format" value="html"/>

    <property name="dataLoaderAPIVersion" value="41.0.0-uber" />
    <!-- Define required jars-->
    <path id="taskDependencies">
        <pathelement location="./lib/ant.jar"/>
        <pathelement location="./lib/antutils.jar"/>
        <pathelement location="./lib/commons-io-2.4.jar"/>
        <pathelement location="${basedir}/lib/commons-lang-2.6.jar"/>
        <pathelement location="${basedir}/lib/commons-logging-1.1.3.jar"/>
        <pathelement location="${basedir}/lib/gson-2.2.4.jar"/>
        <pathelement location="${basedir}/lib/httpclient-4.3.5.jar"/>
        <pathelement location="${basedir}/lib/httpcore-4.3.2.jar"/>
        <pathelement location="${basedir}/lib/json-20080701.jar"/>
    </path>
    <path id="pmd.classpath">
        <fileset dir="${basedir}/pmd-bin-6.24.0/lib/">
            <include name="**/*.jar" />
        </fileset>
    </path>
    
    <taskdef uri="antlib:com.salesforce" classpath="lib/ant-salesforce.jar" />
    <taskdef name="http" uri="org.missinglink.ant.task.http.HttpClientTask" classname="org.missinglink.ant.task.http.HttpClientTask" classpath="lib/ml-ant-http-1.1.3.jar"/>
    <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.classpath" />
    <taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask" classpathref="pmd.classpath" />

    <target name="deploy">
        <echo>
            PRE DEPLOY HAS STARTED
        </echo>
        <antcall target="preDeploy" />
        <echo>
            MAIN DEPLOY HAS STARTED
        </echo>
        <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="src" rollbackOnError="true" ignoreWarnings="true" testLevel="NoTestRun" />
        <echo>
            POST DEPLOY HAS STARTED
        </echo>
        <antcall target="postDeploy" />
    </target>

    <target name="preDeploy">
        <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="preDeploy" rollbackOnError="true" ignoreWarnings="true" testLevel="NoTestRun" />
    </target>

    <target name="postDeploy">
        <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="postDeploy" rollbackOnError="true" ignoreWarnings="true" testLevel="NoTestRun" />
    </target>

    <target name="deployRunTests">
        <echo>
            PRE DEPLOY HAS STARTED
        </echo>
        <antcall target="preDeploy" />
        <echo>
            MAIN DEPLOY WITH TESTS HAS STARTED
        </echo>
        <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="src" rollbackOnError="true" ignoreWarnings="true" testLevel="RunLocalTests" />
        <echo>
            POST DEPLOY HAS STARTED
        </echo>
        <antcall target="postDeploy" />
    </target>
    <target name="deployRunTestsProd">
        <echo>
            MAIN DEPLOY WITH TESTS HAS STARTED
        </echo>
        <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="src" rollbackOnError="true" ignoreWarnings="true" testLevel="RunLocalTests" />

    </target>

    <target name="validate">
        <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="src" rollbackOnError="true" ignoreWarnings="true" testLevel="NoTestRun" checkOnly="true" />
    </target>

    <target name="validateRunTests">
        <echo>PRE DEPLOY HAS STARTED</echo>
        <antcall target="preDeploy" />
        <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="src" rollbackOnError="true" ignoreWarnings="true" testLevel="RunLocalTests" checkOnly="true" />
    </target>

    <target name="validateRunTestsProd">
        <echo>Validate HAS STARTED</echo>
        <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="src" rollbackOnError="true" ignoreWarnings="true" testLevel="RunLocalTests" checkOnly="true" />
    </target>

    <target name="initScriptRun" description="Executes code">
        <loadfile property="script" srcFile="init.script"/>
        <executeAnonymous username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}">
            ${script}
        </executeAnonymous>
    </target>

    <target name="codeExecution" description="Executes code">
        <executeAnonymous username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}">
            ${apexcode}
        </executeAnonymous>
    </target>

    <!-- ============================================================ -->
    <!-- Code Execution                                               -->
    <!-- ============================================================ -->

    <macrodef name="executeAnonymous" description="Invoke ExecuteAnonymous using Salesforce Tooling API">
        <attribute name="username" description="Salesforce user name."/>
        <attribute name="password" description="Salesforce password."/>
        <attribute name="serverurl" description="Salesforce endpoint."/>
        <text name="apexcode"/>
        <sequential>
            <!-- Login to populate serverUrl / sessionId / instance -->
            <login username="@{username}" password="@{password}" serverurl="@{serverurl}" />

            <!-- Execute using HTTP GET -->
            <ml:http url="${instance}/services/data/v34.0/tooling/executeAnonymous" method="GET" outfile="lib/executeAnonymousResult.json"  statusProperty="loginResponseStatus">
                <headers>
                    <header name="Authorization" value="Bearer ${sessionId}"/>
                </headers>
                <query>
                    <parameter name="anonymousBody" value="@{apexcode}"/>
                </query>
            </ml:http>

            <!-- Fail on error -->
            <loadfile property="executeAnonymousResult" srcFile="lib/executeAnonymousResult.json" />
            <fail message="Execute Anonymous failed: ${executeAnonymousResult}">
                <condition>
                    <resourcecontains resource="lib/executeAnonymousResult.json" substring="&quot;success&quot;:false" />
                </condition>
            </fail>

            <!-- Show output -->
            <echo message="${executeAnonymousResult}" />
        </sequential>
    </macrodef>

    <macrodef name="login" description="Login to salesforce and populate serverUrl / sessionId / instance">
        <attribute name="username" description="Salesforce user name."/>
        <attribute name="password" description="Salesforce password."/>
        <attribute name="serverurl" description="Salesforce endpoint."/>
        <sequential>
            <!-- Obtain Session Id via Login SOAP service -->
            <ml:http url="@{serverurl}/services/Soap/c/34.0" method="POST" failonunexpected="false" outfile="lib/loginResult.xml" statusProperty="loginResponseStatus">
                <headers>
                    <header name="Content-Type" value="text/xml"/>
                    <header name="SOAPAction" value="login"/>
                </headers>
                <entity><![CDATA[
                    <env:Envelope xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:env='http://schemas.xmlsoap.org/soap/envelope/'>
                        <env:Body>
                            <sf:login xmlns:sf='urn:enterprise.soap.sforce.com'>
                                <sf:username>@{username}</sf:username>
                                <sf:password>@{password}</sf:password>
                            </sf:login>
                        </env:Body>
                    </env:Envelope>]]>
                </entity>
            </ml:http>

            <!-- Fail on error -->
            <loadfile property="loginResult" srcFile="lib/loginResult.xml" />
            <fail message="Login failed: ${loginResult}">
                <condition>
                    <resourcecontains resource="lib/loginResult.xml" substring="faultcode" />
                </condition>
            </fail>

            <!-- Parse response into properties -->
            <xmlproperty file="lib/loginResult.xml" />
            <echo file="lib/serverUrl.txt" message="${soapenv:Envelope.soapenv:Body.loginResponse.result.serverUrl}" />
            <echo file="lib/sessionId.txt" message="${soapenv:Envelope.soapenv:Body.loginResponse.result.sessionId}" />
            <echo file="lib/instance.txt" message="${soapenv:Envelope.soapenv:Body.loginResponse.result.serverUrl}" />
            <replaceregexp file="lib/instance.txt" match="(https://[^/]+)/.*" replace="\1" />
            <loadfile property="sessionId" srcFile="lib/sessionId.txt" />
            <loadfile property="instance" srcFile="lib/instance.txt" />
        </sequential>
    </macrodef>

    <!-- ============================================================ -->
    <!-- Data export / import Targets                                   -->
    <!-- ============================================================ -->
    <target name="insertData" description="Export Salesforce objects">
        <sfInsert object="${object}" orgserver="${sf.server}" basedir="${basedir}" orgname="${orgname}" username="${sf.username}" password="${sf.passwordencrypted}" />
    </target>

    <target name="exportData" description="Export Salesforce objects">
        <sfExport object="${object}" orgserver="${sf.orgserver}" basedir="${basedir}" orgname="${orgname}" username="${sf.username}" password="${sf.passwordencrypted}" soql="${soql}"/>
    </target>

    <target name="upsertData" description="Upsert Salesforce objects">
        <sfUpsert object="${object}" orgserver="${sf.orgserver}" basedir="${basedir}" orgname="${orgname}" username="${sf.username}" password="${sf.passwordencrypted}" externalIdField="Load_Id__c" mappingfilepostfix="${mappingfilepostfix}" insertNulls="false"/>
    </target>

    <target name="upsertDataInsertNulls" description="Upsert Salesforce objects">
        <sfUpsert object="${object}" orgserver="${sf.orgserver}" basedir="${basedir}" orgname="${orgname}" username="${sf.username}" password="${sf.passwordencrypted}" externalIdField="Load_Id__c" mappingfilepostfix="${mappingfilepostfix}" insertNulls="true"/>
    </target>

    <target name="deleteData" description="Delete Salesforce objects">
        <sfDelete object="${object}" orgserver="${sf.orgserver}" basedir="${basedir}" orgname="${orgname}" username="${sf.username}" password="${sf.passwordencrypted}" />
    </target>

    <target name="pmd">
        <pmd shortFilenames="false" rulesetfiles="ruleset.xml" cacheLocation="pmd.cache">
            <formatter type="${pmd.format}" toFile="pmd.${pmd.format}" />
            <fileset dir="${src.dir}">
                <include name="**/*.cls"/>
                <include name="**/*.trigger"/>
            </fileset>
        </pmd>
    </target>

    <target name="cpd">
        <cpd minimumTokenCount="${cpd.minimumTokenCount}" language="apex" format="${cpd.format}" outputFile="outputCPD.${cpd.format}" encoding="UTF-8" ignoreLiterals="true">
            <fileset dir="${src.dir}">
                <include name="classes/*.cls"/>
            </fileset>
        </cpd>
    </target>
    <target name="pmdHtml">
        <pmd shortFilenames="false" rulesetfiles="ruleset.xml" cacheLocation="pmdhtml.cache">
            <formatter type="${html.format}" toFile="pmd.${html.format}" />
            <fileset dir="${src.dir}">
                <include name="**/*.cls"/>
                <include name="**/*.trigger"/>
            </fileset>
        </pmd>
    </target>

    <target name="staticCodeAnalysis" depends="cpd,pmd,pmdHtml"/>
    <target name="validateCiWithCodeAnalysis" depends="validateRunTests,cpd,pmd"/>
</project>
